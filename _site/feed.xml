<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-05T23:39:21+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tomas Pereira de Vasconcelos</title><subtitle>Physics, math, tech</subtitle><entry><title type="html">Data science for parking availability prediction</title><link href="http://localhost:4000/Save-a-Space/" rel="alternate" type="text/html" title="Data science for parking availability prediction" /><published>2016-11-04T00:00:00+00:00</published><updated>2016-11-04T00:00:00+00:00</updated><id>http://localhost:4000/Save-a-Space</id><content type="html" xml:base="http://localhost:4000/Save-a-Space/">&lt;p&gt;Accelogress Ltd is a UK based software consultancy company developing
mobile app solutions using data analysis, machine learning, and API
technologies. Accelogress’ project,
&lt;a href=&quot;https://save-a-space.com&quot;&gt;Save-a-Space&lt;/a&gt;, introduces a cloud-based
mobile marketplace for real-time booking of parking spaces, which
optimizes parking management (for parking operators) and drivers’
experience (for the end-users).  Save-a-Space’s mobile app allows drivers
to easily find and book the most suitable parking space, according to
their personal preferences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/saveaspacesearch.jpg&quot; alt=&quot;&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;The Save-a-Space mobile app will automatically find the best parking space according to user preferences.&lt;/figcaption&gt;

&lt;p&gt;During my summer internship at Accelogress Ltd, I was trusted with
building the engine and API that deals with the real-time analysis of
parking data and occupancy prediction for their Save-a-Space project.
The API would have to allow for a simple but flexible access to
historical data, as well as availability predictions.&lt;/p&gt;

&lt;h1 id=&quot;the-api&quot;&gt;The API&lt;/h1&gt;

&lt;p&gt;Since the prediction engine was going to be built with Python, it made
sense to also build the API with some Python framework for easy
integration of the two. The API was built using
&lt;a href=&quot;http://www.django-rest-framework.org&quot;&gt;Django REST framework&lt;/a&gt;, which can
quietly sit on top of a &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; server.
Having this integrated setup also allowed for scheduled remote updating
of prediction datasets. The API allows applications and end-users to
query historical data for any car park, as well as predictions of future
occupancy. The Django server was mounted onto a
&lt;a href=&quot;https://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt; which, in turn, runs on an
&lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt; server. The whole environment runs on a
&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container, which makes it easy and
quick to go from development into a production environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/SASserverpipeline.png&quot; alt=&quot;&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Diagram of the server setup used.&lt;/figcaption&gt;

&lt;h1 id=&quot;the-prediction-engine&quot;&gt;The Prediction Engine&lt;/h1&gt;

&lt;p&gt;Thanks to Google’s &lt;a href=&quot;http://scikit-learn.org&quot;&gt;scikit-learn&lt;/a&gt; machine
learning library, the implementation of the prediction algorithm was one
of the most straightforward parts of this project. The goal was to
predict the occupancy of a car-park at some point in the future. We had
years worth of parking data, which was important for testing different
algorithms and optimizing the ones that performed best.
I chose the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mean_squared_error&quot;&gt;&lt;em&gt;mean-squared-error&lt;/em&gt;&lt;/a&gt;
(MSE) to be our performance metric. What we need now is to minimize
the MSE of our algorithm, as an MSE of zero represents a perfect estimator.&lt;/p&gt;

&lt;p&gt;The algorithm can take as input parameters like the month; week-day;
hour; bank holidays (True/False); etc… and outputs the predicted
availability. The choice of input parameters affects the
performance of the algorithm. To find the optimal machine learning
&lt;em&gt;smoothie&lt;/em&gt;, I ran a brute-force test with multiple algorithms for
multiple car parks with different combinations of input parameters,
with the goal of minimizing the MSE. In the end, I found the
&lt;a href=&quot;http://scikit-learn.org/stable/modules/tree.html&quot;&gt;Decision Tree Algorithm&lt;/a&gt;
to be the most suitable and reliable estimator. Decision trees allow
us to easily visualize the underlying model, which can be very useful to
communicate the factors that most influence the occupancy of a car park.
This can be especially useful for parking operators. Each algorithm
will have its own extra set of parameters that can be extremely useful for
minimizing the MSE. In the case of trees, we can use the &lt;em&gt;maximum-depth&lt;/em&gt;
to limit its size and prevent
&lt;a href=&quot;https://en.wikipedia.org/wiki/Overfitting&quot;&gt;overfitting&lt;/a&gt;. After tuning
each ingredient I was able to get the MSE of our algorithm to be as low
as 0.37%!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/sashistvspred.png&quot; alt=&quot;&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Comparison of the predicted data (Orange) and real data (Blue)&lt;/figcaption&gt;

&lt;h2 id=&quot;working-example&quot;&gt;Working example&lt;/h2&gt;

&lt;p&gt;This is a quick working example of how to get started with the tree
classifier from scikit-learn. In this first code block, I am generating
some example data that we will need to train and test our chosen algorithm.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SAMPLE_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;896&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 28 * 6
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 4 weeks range: 28 days times 2*pi radians
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAMPLE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Generate a sin wave for the occupancy percentage
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Reduce occupancy on weekends
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAMPLE_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Add some random noise
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAMPLE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Round the occupancy percentage to the nearest integer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Convert from radians to 'days' and
# clip days of week between 0 and 6
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range_cliped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;weekdays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range_cliped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# transform fractional part of the day to an hour
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_range_cliped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above generates a hypothetical dataset for a car park that peaks
at mid-day and has less occupancy on weekends. In this example, I generated
4 weeks of data. The image below shows the first 14 days of the generated
dataset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/sklearnSAS.png&quot; alt=&quot;&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;The first 14 days of generated example data.&lt;/figcaption&gt;

&lt;p&gt;As you’ll see below, getting started with the sklearn library is extremely
easy. This is a very simple example of how we could use the data generated
above to make availability predictions in the future. In the example below
the Decision Tree Classifier predicts that on Sundays at mid-day the
occupancy is around 48% and on Tuesdays at 9 am is around 70%. Comparing
this prediction with the plot above, we see that the tree was accurate.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.tree&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecisionTreeClassifier&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create and instance of DecisionTreeClassifier
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecisionTreeClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Input parameters (features): day-of-week, hour-of-day
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weekdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Train the classifier
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occupancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make a prediction for:
#   - Sunday at 12pm: [6, 12]
#   - Tuesday at 9am: [1, 9]
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Projects" /><category term="Machine-Learning" /><category term="projects" /><category term="Python" /><category term="API" /><summary type="html">Accelogress Ltd is a UK based software consultancy company developing mobile app solutions using data analysis, machine learning, and API technologies. Accelogress’ project, Save-a-Space, introduces a cloud-based mobile marketplace for real-time booking of parking spaces, which optimizes parking management (for parking operators) and drivers’ experience (for the end-users). Save-a-Space’s mobile app allows drivers to easily find and book the most suitable parking space, according to their personal preferences.</summary></entry></feed>